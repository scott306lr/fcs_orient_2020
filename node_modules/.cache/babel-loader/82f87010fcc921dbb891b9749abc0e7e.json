{"remainingRequest":"/home/lr/coding/javascript/fcs_orient_2021/orient_frontend/node_modules/babel-loader/lib/index.js!/home/lr/coding/javascript/fcs_orient_2021/orient_frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lr/coding/javascript/fcs_orient_2021/orient_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lr/coding/javascript/fcs_orient_2021/orient_frontend/src/views/Secret.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lr/coding/javascript/fcs_orient_2021/orient_frontend/src/views/Secret.vue","mtime":1619341613423},{"path":"/home/lr/coding/javascript/fcs_orient_2021/orient_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lr/coding/javascript/fcs_orient_2021/orient_frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/lr/coding/javascript/fcs_orient_2021/orient_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lr/coding/javascript/fcs_orient_2021/orient_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Secret.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"backend\">\n    <Clock />\n    <div>\n      <a> 選擇隊伍： </a>\n      <b-form-select class=\"w-50\" v-model=\"selected_group\" :options=\"g_options\">\n        <template #first>\n          <b-form-select-option\n            class=\"justify-content-center\"\n            :value=\"null\"\n            disabled\n          >\n            -- Select team --\n          </b-form-select-option>\n        </template>\n      </b-form-select>\n    </div>\n\n    <div>\n      <a> 加分原因： </a>\n      <b-form-select\n        class=\"w-50\"\n        v-model=\"selected_type\"\n        :options=\"type_options\"\n      >\n        <template #first>\n          <b-form-select-option\n            class=\"justify-content-center\"\n            :value=\"null\"\n            disabled\n          >\n            -- Select reason --\n          </b-form-select-option>\n        </template>\n      </b-form-select>\n    </div>\n\n    <b-input-group prepend=\"題目id\">\n      <b-form-input v-model=\"input_hid\" placeholder=\"\"></b-form-input>\n    </b-input-group>\n\n    <b-input-group prepend=\"增加隊伍分數\">\n      <b-form-input v-model=\"input_score\" placeholder=\"\"></b-form-input>\n      <template #append>\n        <b-button\n          :disabled=\"input_hid === ''\"\n          @click=\"\n            addScore(selected_group, input_hid, selected_type, input_score)\n          \"\n        >\n          加分\n        </b-button>\n      </template>\n    </b-input-group>\n\n    <b-button block v-b-toggle.a1 variant=\"info\">\n      維護用，平時請勿使用\n    </b-button>\n\n    <b-collapse id=\"a1\" accordion=\"my-accordion\" role=\"tabpanel\">\n      <b-input-group prepend=\"更改隊伍名稱\">\n        <b-form-input v-model=\"input_name\" placeholder=\"\"></b-form-input>\n        <template #append>\n          <b-button @click=\"cdtextUpdate(input_cdtext)\">更名</b-button>\n        </template>\n      </b-input-group>\n\n      <b-input-group prepend=\"倒數顯示文字\">\n        <b-form-input v-model=\"input_cdtext\" placeholder=\"\"></b-form-input>\n        <template #append>\n          <b-button variant=\"primary\" @click=\"changeName(selected_group, input_name)\"\n            >更新</b-button\n          >\n          <b-button @click=\"changeFreeze()\">\n            更改是否凍結\n          </b-button>\n        </template>\n      </b-input-group>\n\n      <b-input-group prepend=\"增減題目ID\">\n        <b-form-input v-model=\"input_spid\" placeholder=\"\"></b-form-input>\n        <template #append>\n          <b-button :disabled=\"input_spid === ''\" @click=\"addSpecial(input_spid)\">\n            增加特殊題\n          </b-button>\n        </template>\n      </b-input-group>\n\n      <div>\n        <b-button\n          squared\n          variant=\"primary\"\n          :disabled=\"selected_group === null\"\n          @click=\"fetchHints(selected_group)\"\n        >\n          檢視排組\n        </b-button>\n\n        <b-form-select\n          class=\"w-50\"\n          v-model=\"selected_hints\"\n          :options=\"h_options\"\n        >\n          <template #first>\n            <b-form-select-option\n              class=\"justify-content-center\"\n              :value=\"null\"\n              disabled\n            >\n              -- Select hint --\n            </b-form-select-option>\n          </template>\n        </b-form-select>\n\n        <b-button\n          squared\n          variant=\"primary\"\n          :disabled=\"selected_hints === null\"\n          @click=\"changeDone(selected_group, selected_hints)\"\n        >\n          更改是否完成\n        </b-button>\n\n        <b-button\n          squared\n          variant=\"primary\"\n          :disabled=\"selected_hints === null\"\n          @click=\"changeAvail(selected_group, selected_hints)\"\n        >\n          更改是否開啟\n        </b-button>\n      </div>\n\n      <b-button squared variant=\"primary\" @click=\"deleteGroup(selected_group)\">\n        刪除該隊伍\n      </b-button>\n\n      <b-button squared variant=\"primary\" @click=\"deleteHintsLog(selected_group)\">\n        刪除hints和logging\n      </b-button>\n\n      <b-button squared variant=\"primary\" @click=\"Initialize()\">\n        初始化\n      </b-button>\n\n      <br />\n      <b-input-group prepend=\"增加隊伍\">\n        <b-form-input\n          v-model=\"input_genid\"\n          placeholder=\"group id\"\n        ></b-form-input>\n        <template #append>\n          <b-button @click=\"addGroup(input_genid)\">add group</b-button>\n        </template>\n      </b-input-group>\n    </b-collapse>\n    <!-- 增加隊伍、隊伍改分數、換題目、題目解鎖、題目完成、改題目分數、bonus etc -->\n    <GroupLog gid=\"0\" admin=\"yes\" />\n  </div>\n</template>\n\n<script>\nimport Clock from \"../components/Clock.vue\";\nimport GroupLog from \"../components/GroupLog.vue\";\n\nexport default {\n  name: \"Secret\",\n  components: {\n    Clock,\n    GroupLog,\n  },\n  data() {\n    return {\n      freeze: String,\n      hint: JSON,\n      hints: JSON,\n      group: JSON,\n      groups: [],\n      input_cdtext: \"\",\n      input_name: \"\",\n      input_score: \"\",\n      input_hid: \"\",\n      input_genid: \"\",\n      input_spid: \"\",\n      selected_group: 0,\n      selected_hints: 0,\n      selected_type: 0,\n      g_options: [],\n      h_options: [],\n      type_options: [\n        {\n          text: \"回答工人謎題\",\n          value: 0,\n        },\n        {\n          text: \"完成上傳照片\",\n          value: 1,\n        },\n        {\n          text: \"分數錯誤修正\",\n          value: 2,\n        },\n      ],\n    };\n  },\n  mounted() {\n    this.fetchGroups();\n    this.fetchOthers();\n    //this.fetchHints(this.groups[this.selected_group].id);\n  },\n  created() {\n    //this.group_id = this.$route.query.group;\n  },\n  methods: {\n    async logging(gid, reason, curScore, addScore) {\n      var date = new Date();\n      var hhmmss =\n        date.getHours().toString().padStart(2, \"0\") +\n        \":\" +\n        date.getMinutes().toString().padStart(2, \"0\") +\n        \":\" +\n        date.getSeconds().toString().padStart(2, \"0\");\n\n      await this.axios\n        .post(\"/backend/logging/\", {\n          group_id: gid,\n          reason: reason,\n          fin_time: hhmmss,\n          cur_score: curScore,\n          get_score: addScore,\n        })\n        .then(function (response) {\n          return response.data;\n        });\n    },\n    async fetchOthers() {\n      const val_s = await this.axios\n        .get(\"/backend/others/1\")\n        .then(function (response) {\n          return response.data;\n        });\n      //this.input_cdtext = val_s.cd_text;\n      this.freeze = val_s.freeze;\n    },\n    async fetchHints(gid) {\n      const val_groupinfo = await this.axios\n        .get(\"/backend/groupsinfo/\" + this.groups[gid].id + \"/\")\n        .then(function (response) {\n          return response.data;\n        });\n      const val_hints = val_groupinfo.hints;\n\n      this.h_options = [];\n      for (var i = 0; i < val_hints.length; i++) {\n        var jsonData = {};\n        jsonData[\"value\"] = i; //val_hints[i][\"id\"];\n        jsonData[\"text\"] = \"hint id: \" + val_hints[i][\"hint_id\"];\n        this.h_options.push(jsonData);\n      }\n\n      this.hints = val_hints;\n    },\n\n    async fetchGroups() {\n      const val_groups = await this.axios\n        .get(\"/backend/groups/\")\n        .then(function (response) {\n          return response.data;\n        });\n      //this.groups = val_groups;\n      this.g_options = [];\n      for (var i = 0; i < val_groups.length; i++) {\n        var jsonData = {};\n        jsonData[\"value\"] = i; //val_groups[i][\"id\"];\n        jsonData[\"text\"] = val_groups[i][\"name\"];\n        this.g_options.push(jsonData);\n      }\n      this.groups = val_groups;\n    },\n\n    async fetchGroup() {\n      const val_group = await this.axios\n        .get(\"/backend/groups/\" + this.selected_group + \"/\")\n        .then(function (response) {\n          return response.data;\n        });\n      this.group = val_group;\n    },\n\n    async changeName(gid, name) {\n      if (name === \"\") {\n        alert(\"隊伍名稱不可為空！\");\n        return;\n      }\n\n      const val_groups = await this.axios\n        .get(\"/backend/groups/\")\n        .then(function (response) {\n          return response.data;\n        });\n      this.groups = val_groups;\n\n      if (confirm(\"確認更改隊名?\")) {\n        await this.axios\n          .patch(\"/backend/groups/\" + this.groups[gid].id + \"/\", {\n            name: name,\n          })\n          .then(function (response) {\n            return response.data;\n          });\n        alert(\"更名成功！\");\n      }\n    },\n    async cdtextUpdate(text) {\n      await this.axios.patch(\"/backend/others/1\", {\n        cd_text: text,\n      });\n    },\n    async addScore(gid, hid, selected, score) {\n      if (score === \"\") {\n        alert(\"分數欄不可為空！\");\n        return;\n      }\n\n      const val_groups = await this.axios\n        .get(\"/backend/groups/\")\n        .then(function (response) {\n          return response.data;\n        });\n      this.groups = val_groups;\n\n      var newscore = this.groups[gid].score + parseInt(score);\n      var text =\n        \"隊伍\" +\n        gid +\n        \": \" +\n        this.groups[gid].name +\n        \"\\n目前分數：\" +\n        this.groups[gid].score +\n        \"\\n更改後分數：\" +\n        newscore;\n\n      if (confirm(text)) {\n        this.groups[gid].score = newscore;\n        await this.axios\n          .patch(\"/backend/groups/\" + this.groups[gid].id + \"/\", {\n            score: this.groups[gid].score,\n          })\n          .then(function (response) {\n            return response.data;\n          });\n\n        switch (selected) {\n          case 0:\n            await this.logging(\n              this.groups[gid].id,\n              \"回答謎題\",\n              this.groups[gid].score,\n              score\n            );\n            break;\n          case 1:\n            await this.logging(\n              this.groups[gid].id,\n              \"審查完成 id:\" + hid,\n              this.groups[gid].score,\n              score\n            );\n            break;\n          default:\n            await this.logging(\n              this.groups[gid].id,\n              \"修正分數錯誤\",\n              this.groups[gid].score,\n              score\n            );\n            break;\n        }\n\n        alert(\"加分成功！\");\n      }\n      this.fetchGroups();\n    },\n    async changeDone(gid, hid) {\n      const val_groupinfo = await this.axios\n        .get(\"/backend/groupsinfo/\" + this.groups[gid].id.toString() + \"/\")\n        .then(function (response) {\n          return response.data;\n        });\n      this.hints = val_groupinfo.hints;\n\n      var change = \"\";\n      if (this.hints[hid].done === \"yes\") change = \"no\";\n      else change = \"yes\";\n\n      var text = \"done  \" + this.hints[hid].done + \" -> \" + change;\n      if (confirm(text)) {\n        this.hints[hid].done = change;\n\n        await this.axios\n          .patch(\"/backend/hints/\" + this.hints[hid].id.toString() + \"/\", {\n            done: this.hints[hid].done,\n          })\n          .then(function (response) {\n            return response.data;\n          });\n      }\n    },\n    async changeAvail(gid, hid) {\n      const val_groupinfo = await this.axios\n        .get(\"/backend/groupsinfo/\" + this.groups[gid].id.toString() + \"/\")\n        .then(function (response) {\n          return response.data;\n        });\n      this.hints = val_groupinfo.hints;\n\n      var change = \"\";\n      if (this.hints[hid].avail === \"yes\") change = \"no\";\n      else change = \"yes\";\n\n      var text = \"avail  \" + this.hints[hid].avail + \" -> \" + change;\n      if (confirm(text)) {\n        this.hints[hid].avail = change;\n\n        await this.axios\n          .patch(\"/backend/hints/\" + this.hints[hid].id.toString() + \"/\", {\n            avail: this.hints[hid].avail,\n          })\n          .then(function (response) {\n            return response.data;\n          });\n      }\n    },\n\n    async changeFreeze() {\n      const val_s = await this.axios\n        .get(\"/backend/others/1\")\n        .then(function (response) {\n          return response.data;\n        });\n      this.input_cdtext = val_s.cd_text;\n      this.freeze = val_s.freeze;\n\n      var change = \"\";\n      if (this.freeze === \"yes\") change = \"no\";\n      else change = \"yes\";\n\n      var text = \"freeze  \" + this.freeze + \" -> \" + change;\n      if (confirm(text)) {\n        this.freeze = change;\n\n        await this.axios\n          .patch(\"/backend/others/1\", {\n            freeze: this.freeze,\n          })\n          .then(function (response) {\n            return response.data;\n          });\n      }\n    },\n\n    async addGroup(genid) {\n      if (confirm(`Add new group with id:${genid}?`)) {\n        const val_groups = await this.axios\n          .get(\"/backend/groups/\")\n          .then(function (response) {\n            return response.data;\n          });\n        this.groups = val_groups;\n\n        await this.axios\n          .post(\"/backend/groupsinfo/\", {\n            id: genid,\n            hints: [],\n          })\n          .then(function (response) {\n            return response.data;\n          });\n\n        await this.axios\n          .post(\"/backend/groups/\", {\n            id: genid,\n            score: 0,\n            name: \"隊伍\" + (parseInt(genid) % 1000),\n          })\n          .then(function (response) {\n            return response.data;\n          });\n      }\n    },\n\n    async deleteGroup(gid) {\n      if (confirm(`Delete group id:${this.groups[gid].id}?`)) {\n        const val_groups = await this.axios\n          .get(\"/backend/groups/\")\n          .then(function (response) {\n            return response.data;\n          });\n        this.groups = val_groups;\n\n        await this.axios\n          .delete(\"/backend/groupsinfo/\" + this.groups[gid].id + \"/\")\n          .then(function (response) {\n            return response.data;\n          });\n\n        await this.axios\n          .delete(\"/backend/groups/\" + this.groups[gid].id + \"/\")\n          .then(function (response) {\n            return response.data;\n          });\n      }\n    },\n\n    async deleteHintsLog() {\n      const val_logging = await this.axios\n        .get(\"/backend/logging/\")\n        .then(function (response) {\n          return response.data;\n        });\n\n      for (var i = val_logging.length - 1; i >= 0; --i) {\n        await this.axios\n          .delete(\"/backend/logging/\" + val_logging[i].id + \"/\")\n          .then(function (response) {\n            return response.data;\n          });\n      }\n\n      const val_hints = await this.axios\n        .get(\"/backend/hints/\")\n        .then(function (response) {\n          return response.data;\n        });\n\n      for (i = val_hints.length - 1; i >= 0; --i) {\n        await this.axios\n          .delete(\"/backend/hints/\" + val_hints[i].id + \"/\")\n          .then(function (response) {\n            return response.data;\n          });\n      }\n\n      console.log(\"deleted all.\");\n    },\n\n    async open_hints(gid, open_cnt) {\n      const val_groupinfo = await this.axios\n        .get(\"/backend/groupsinfo/\" + gid + \"/\")\n        .then(function (response) {\n          return response.data;\n        });\n      this.hints = val_groupinfo.hints;\n\n      var locked = [];\n      for (var i = 0; i < this.hints.length; ++i) {\n        if (this.hints[i].avail === \"no\") {\n          locked.push(i);\n        }\n      }\n\n      var cnt = Math.min(open_cnt, locked.length);\n      while (cnt > 0) {\n        var j = Math.floor(Math.random() * locked.length);\n        var did = locked[j];\n        console.log(did);\n        this.hints[did].avail = \"yes\";\n        locked.splice(j, 1);\n\n        await this.axios\n          .patch(\"/backend/hints/\" + this.hints[did].id + \"/\", {\n            avail: this.hints[did].avail,\n          })\n          .then(function (response) {\n            return response.data;\n          });\n        cnt -= 1;\n        console.log(\"unlocked hint \" + this.hints[did].hint_id);\n      }\n      console.log(gid + \" opened \" + open_cnt + \" hints.\");\n    },\n    async addSpecial(hid) {\n      if (confirm(\"增加題目 id:\"+hid)){\n        const val_groups = await this.axios\n          .get(\"/backend/groups/\")\n          .then(function (response) {\n            return response.data;\n          });\n        this.groups = val_groups;\n\n        const val_hint = await this.axios\n          .get(\"/backend/hint/\"+ hid + \"/\")\n          .then(function (response) {\n            return response.data;\n          });\n\n        var allgroups = []\n        for (var i = 0; i < this.groups.length; ++i) {\n          allgroups.push(this.groups[i].id);\n        }\n\n        await this.axios\n          .post(\"/backend/hints/\", {\n            hint_id: hid,\n            done_by: 0,\n            avail: \"yes\",\n            done: \"no\",\n            where: val_hint.where,\n            whichgroup: allgroups,\n          })\n          .then(function (response) {\n            return response.data;\n          });\n      }\n    },\n\n    async create() {\n      const val_groups = await this.axios\n        .get(\"/backend/groups/\")\n        .then(function (response) {\n          return response.data;\n        });\n      this.groups = val_groups;\n\n      const val_hint = await this.axios\n        .get(\"/backend/hint/\")\n        .then(function (response) {\n          return response.data;\n        });\n\n      for (var i = 0; i < val_hint.length; ++i) {\n        if (val_hint[i].id <= 100) continue;\n        for (var j = 0; j < this.groups.length; ++j) {\n          await this.axios\n            .post(\"/backend/hints/\", {\n              hint_id: val_hint[i].id,\n              done_by: 0,\n              avail: \"no\",\n              done: \"no\",\n              where: val_hint[i].where,\n              whichgroup: [this.groups[j].id],\n            })\n            .then(function (response) {\n              return response.data;\n            });\n        }\n      }\n\n      for (i = 0; i < this.groups.length; ++i) {\n        await this.axios\n          .patch(\"/backend/groups/\" + this.groups[i].id.toString() + \"/\", {\n            score: 0,\n          })\n          .then(function (response) {\n            return response.data;\n          });\n      }\n      console.log(\"score all set to 0\");\n\n      console.log(\"create finished.\");\n    },\n\n    async Initialize() {\n      if (confirm(\"Initialize?\")) {\n        await this.deleteHintsLog();\n        await this.create();\n        for (var i = 0; i < this.groups.length; ++i) {\n          await this.open_hints(this.groups[i].id, 5);\n        }\n        console.log(\"Initialize complete.\");\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n// .samecol {\n//   display: flex;\n//   justify-content: space-between;\n// }\n</style>\n"],"sourceRoot":"src/views"}]}